class Solution {
    public int longestStrChain(String[] words) {
        int n = words.length;
        Arrays.sort(words, (a,b) -> Integer.compare(a.length(),b.length()));

        int[] dp = new int[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }

        for(int i=0;i<n;i++){
            for(int prev=0;prev<i;prev++){
                if(check(words[prev],words[i])){
                    dp[i] = Math.max(dp[i],1+dp[prev]);
                }
            }
        }

        int maxi=1;
        for(int i=0;i<n;i++){
            maxi=Math.max(maxi,dp[i]);
        }

        return maxi;
    }

    public boolean check(String prev,String next){
        int n = prev.length();
        int m = next.length();

        if(n != m-1){
            return false;
        }

        int i=0;
        int j=0;
        int count = 0;

        while(i<n && j<m){
            if(i<n && prev.charAt(i)==next.charAt(j)){
                i++;
                j++;
            }
            else{
                j++;
                count++;
            }

            if(count>1) return false;
        }

        return true;
    }
}
