class Solution {
    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {
        int n = recipes.length;

        HashMap<String, List<Integer>> adj = new HashMap<>();
        HashSet<String> set = new HashSet<>();

        for(String s: supplies){
            set.add(s);
        }
        int[] inDeg = new int[n];

        for(int i=0;i<n;i++){
            for(String ele: ingredients.get(i)){
                if(!set.contains(ele)){
                    if(!adj.containsKey(ele)){
                        adj.put(ele,new ArrayList<>());
                    }
                    adj.get(ele).add(i);
                    inDeg[i]++;
                }
            }
        }

        Queue<Integer> q = new LinkedList<>();


        for(int i=0;i<n;i++){
            if(inDeg[i]==0){
                q.offer(i);
            }
        }

        List<String> ans = new ArrayList<>();

        while(!q.isEmpty()){
            int ind = q.poll();
            String recipe = recipes[ind];
            ans.add(recipe);

            if(adj.containsKey(recipe)){
                for(int nbr: adj.get(recipe)){
                    inDeg[nbr]--;
                    if(inDeg[nbr]==0){
                        q.offer(nbr);
                    }
                }
            }
        }

        return ans;
    }
}
