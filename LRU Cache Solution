class LRUCache {

    public final int capacity;
    public final HashMap<Integer,Node> map;
    public final DLL dll;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.map = new HashMap<>();
        this.dll = new DLL();
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;

        Node node = map.get(key);
        dll.moveToHead(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            node.val = value;
            dll.moveToHead(node);
        }else{
            if(map.size()>=capacity){
                Node tail = dll.removeTail();
                map.remove(tail.key);
            }

            Node newNode = new Node(key,value);
            map.put(key,newNode);
            dll.addToHead(newNode);
        }
    }

    static class Node{
        int key,val;
        Node prev,next;

        Node(int key,int val){
            this.key = key;
            this.val = val;
        }
    }

    public static class DLL{
        public final Node head,tail;

        DLL(){
            head = new Node(0,0);
            tail = new Node(0,0);
            head.next = tail;
            tail.prev = head;
        }

        void addToHead(Node node){
            node.next = head.next;
            node.prev = head;
            head.next.prev = node;
            head.next = node;
        }

        void moveToHead(Node node){
            remove(node);
            addToHead(node);
        }

        Node removeTail(){
            Node node = tail.prev;
            remove(node);
            return node;
        }

        void remove(Node node){
            node.next.prev = node.prev;
            node.prev.next = node.next; 
        }

    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
