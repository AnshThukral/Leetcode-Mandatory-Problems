class Solution {
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int ans = 0;
        int n = status.length;
        boolean[] visited = new boolean[n];
        Set<Integer> foundBoxes = new HashSet<>();

        for (int box : initialBoxes) {
            ans += dfs(box, status, candies, keys, containedBoxes, visited, foundBoxes);
        }
        return ans;
    }

    public int dfs(int box, int[] status, int[] candies, int[][] keys, int[][] containedBoxes, boolean[] visited,
            Set<Integer> foundBoxes) {
        if (visited[box] == true)
            return 0;

        if (status[box] == 0) {
            foundBoxes.add(box);
            return 0;
        }

        int ans = 0;
        visited[box] = true;
        ans += candies[box];

        for (int insideBoxes : containedBoxes[box]) {
            ans += dfs(insideBoxes, status, candies, keys, containedBoxes, visited, foundBoxes);

        }

        for (int keyBox : keys[box]) {
            status[keyBox] = 1;
            if (foundBoxes.contains(keyBox)) {
                ans += dfs(keyBox, status, candies, keys, containedBoxes, visited, foundBoxes);
            }

        }
        return ans;
    }
}
