class Solution {

    public int minDifference(int arr[]) {
        // Your code goes here
        int range = 0;
        for(int i=0;i<arr.length;i++){
            range=range+arr[i];
        }
        
        int[] effArr = subsetSum(arr,range);
        
        int minDiff = Integer.MAX_VALUE;
        
        for(int i=0;i<=range/2;i++){
            if(effArr[i] == 1){
                minDiff = Math.min(minDiff, range - 2*i);
            }
        }
        
        return minDiff;
    }
    
    public int[] subsetSum(int[]arr, int target){
        int n = arr.length;
        
        boolean[][] t = new boolean[n+1][target+1];
        
        for(int i=0;i<n+1;i++){
            for(int j=0;j<target+1;j++){
                if(i==0){
                    t[i][j]=false;
                }
                
                if(j==0){
                    t[i][j]=true;
                }
            }
        }
        
        for(int i=1;i<n+1;i++){
            for(int j=1;j<target+1;j++){
                if(arr[i-1]<=j){
                    t[i][j]= t[i-1][j-arr[i-1]] || t[i-1][j];
                }else{
                    t[i][j]= t[i-1][j];
                }
            }
        }
        
        int[] res = new int[target+1];
        
        for(int j=0;j<target+1;j++){
            res[j] = t[n][j] ? 1: 0;
        }
        
        return res;
    }
}

Time Complexity
subsetSum Function:

The DP table (t) has dimensions (n+1) x (target+1).

Each cell is filled in O(1) time.

The loops to fill the table iterate over all n+1 rows and target+1 columns.

Therefore, time complexity of filling the DP table is O(n * target).

target in the worst case is the sum of the array elements, S.

Worst-case time complexity: O(n * S).

minDifference Function:

The loop iterates from 0 to range / 2, i.e., O(S / 2) iterations in the worst case.

Overall time complexity: The dominant term is from the subsetSum function, so:

O(n * S).
Space Complexity
DP Table in subsetSum:

A boolean DP table of size (n+1) x (target+1) is used.
Space used: O(n * S).
Resultant Array effArr:

An integer array of size target+1 (or S+1) is used to store possible subset sums.

Space used: O(S).

Overall Space Complexity:

O(n * S) due to the DP table.
