import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minimumMoves' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. STRING_ARRAY grid
     *  2. INTEGER startX
     *  3. INTEGER startY
     *  4. INTEGER goalX
     *  5. INTEGER goalY
     */

    public static int minimumMoves(List<String> grid, int startX, int startY, int goalX, int goalY) {
    // Write your code here
    int n = grid.size();
    boolean[][] vis = new boolean[n][n];
    Queue<int[]> q = new LinkedList<>();
    q.offer(new int[]{startX,startY,0});
    vis[startX][startY]=true;
    
    int[] delRow = {-1,0,1,0};
    int[] delCol = {0,1,0,-1};
    
    while(!q.isEmpty()){
        int[] arr = q.poll();
        int r = arr[0];
        int c = arr[1];
        int moves = arr[2];
        
        if(r==goalX && c==goalY) return moves;
        
        for(int i=0;i<4;i++){
            int row = r ;
            int col = c ;
            
            while(true){
                row+=delRow[i];
                col+=delCol[i];
                if(row<0 || row>=n || col<0 || col>=n || grid.get(row).charAt(col)=='X') break;
            
                if(!vis[row][col]){
                  q.offer(new int[]{row,col,moves+1});
                  vis[row][col]=true;
                }
            }
            
        }
    }
    
    return -1;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> grid = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int startX = Integer.parseInt(firstMultipleInput[0]);

        int startY = Integer.parseInt(firstMultipleInput[1]);

        int goalX = Integer.parseInt(firstMultipleInput[2]);

        int goalY = Integer.parseInt(firstMultipleInput[3]);

        int result = Result.minimumMoves(grid, startX, startY, goalX, goalY);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
