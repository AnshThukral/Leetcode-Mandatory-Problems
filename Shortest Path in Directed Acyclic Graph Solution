class Solution {
    
    static class Pair{
        int first;
        int second;
        Pair(int first, int second){
            this.first=first;
            this.second=second;
        }
    } 
    
    public void dfs(int node,int[] vis,ArrayList<ArrayList<Pair>> adj, Deque<Integer> s){
        vis[node]=1;
        
        for(Pair nbr: adj.get(node)){
            if(vis[nbr.first]==0){
                dfs(nbr.first,vis,adj,s);
            }
        }
        
        s.push(node);
    }

    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge: edges){
            adj.get(edge[0]).add(new Pair(edge[1],edge[2]));
        }
        
        int[] vis = new int[V];
        // Deque is faster than stack
        Deque<Integer> s = new ArrayDeque<>();
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,vis,adj,s); //O(N+E)
            }
        }
        
        int[] dis = new int[V];
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[0]=0;
        
        // O(N + E)
        while(!s.isEmpty()){
            int node = s.pop();
            
            if(dis[node]!=Integer.MAX_VALUE){
                for(Pair p: adj.get(node)){
                    if(dis[node] + p.second<dis[p.first]){
                        dis[p.first]=dis[node]+p.second;
                    }
                }
            }
        }
        
        for(int i=0;i<V;i++){
            if(dis[i]==Integer.MAX_VALUE){
                dis[i]=-1;
            }
        }
        
        return dis;
    }
}
