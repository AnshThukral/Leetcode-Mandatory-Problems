class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int m = graph[0].length;

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<n;i++){
            int[] arr = graph[i];
            for(int ele: arr){
                adj.get(i).add(ele);
            }
        }

        int[] color = new int[n];
        Arrays.fill(color,-1);

        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(check(i,n,color,adj)==false){
                    return false;
                }
            }
        }

        return true;
    }

    public boolean check(int start,int n,int[] color,ArrayList<ArrayList<Integer>> adj){
        Queue<Integer> q = new LinkedList<>();
        q.offer(start);
        color[start]=0;

        while(!q.isEmpty()){
            int node = q.poll();

            for(int nbr: adj.get(node)){
                if(color[nbr]==-1){
                    color[nbr]=1-color[node];
                    q.offer(nbr);
                }else if(color[nbr]==color[node]){
                    return false;
                }
            }
        }

        return true;
    }
}
