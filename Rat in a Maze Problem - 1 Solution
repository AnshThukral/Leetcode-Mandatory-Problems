class Solution {
    // Function to find all possible paths
    public ArrayList<String> ratInMaze(int[][] maze) {
        // code here
        int n = maze.length;
        boolean[][] visited = new boolean[n][n];
        ArrayList<String> ans = new ArrayList<>();
        
        if(maze[0][0]==1){
            solve(maze,0,0,n,ans,"",visited);
        }
        Collections.sort(ans);
        return ans;
    }
    
    public void solve(int[][] maze,int i,int j,int n,ArrayList<String> ans,String str,boolean[][] visited){
        if(i==n-1 && j==n-1){
            ans.add(str);
            return;
        }
        
        visited[i][j] = true;
        
        if(i-1>=0 && maze[i-1][j]==1 && !visited[i-1][j]){
            solve(maze,i-1,j,n,ans,str+"U",visited);
        }
        if(i+1<n && maze[i+1][j]==1 && !visited[i+1][j]){
            solve(maze,i+1,j,n,ans,str+"D",visited);
        }
        if(j+1<n && maze[i][j+1]==1 && !visited[i][j+1]){
            solve(maze,i,j+1,n,ans,str+"R",visited);
        }
        if(j-1>=0 && maze[i][j-1]==1 && !visited[i][j-1]){
            solve(maze,i,j-1,n,ans,str+"L",visited);
        }
        
        visited[i][j] = false;
    }
}
