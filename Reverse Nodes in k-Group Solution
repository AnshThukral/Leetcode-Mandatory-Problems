/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        ListNode next = null;
        ListNode prev = null;

        while(temp!=null){
            ListNode kth = findKth(temp,k);

            if(kth==null){
                if(prev!=null){
                    prev.next = temp;
                    break;
                }
            }

            next = kth.next;
            kth.next = null;
            kth = reverse(temp);

            if(temp==head){
                head = kth;
            }else{
                prev.next = kth;
            }

            prev = temp;
            temp = next;

        }
        return head;
    }

    public ListNode findKth(ListNode temp,int k){
        k--;
        while(temp!=null && k>0){
            temp = temp.next;
            k--;
        }
        return temp;
    }

    public ListNode reverse(ListNode temp){
        ListNode t = temp;
        ListNode prev = null;
        while(t!=null){
            ListNode front = t.next;
            t.next = prev;
            prev = t;
            t = front;
        }
        return prev;
    }
}
