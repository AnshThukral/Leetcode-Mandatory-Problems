class Solution {
    static class Pair{
        int first;
        int second;
        Pair(int first,int second){
            this.first=first;
            this.second=second;
        }
    }
    
    public void bfs(int r,int c,int[][] vis,char[][] grid){
        vis[r][c]=1;
        
        Queue<Pair> q1 = new LinkedList<>();
        
        q1.offer(new Pair(r,c));
        int n = grid.length;
        int m = grid[0].length;
        
        while(!q1.isEmpty()){
            int row = q1.peek().first;
            int col = q1.peek().second;
            q1.poll();
            
            //traverse in the neighbours and mark them if islands
            for(int deltaRow=-1;deltaRow<=1;deltaRow++){
                for(int deltaCol=-1;deltaCol<=1;deltaCol++){
                    int nRow = row + deltaRow;
                    int nCol = col + deltaCol;
                    
                    if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && grid[nRow][nCol]=='1' && vis[nRow][nCol]==0){
                        vis[nRow][nCol]=1;
                        q1.offer(new Pair(nRow,nCol));
                    }
                }
            }
        }
    }
    
    public int numIslands(char[][] grid) {
        // Code here
        int n = grid.length;
        int m = grid[0].length;
        
        int[][] vis = new int[n][m];
        int ans = 0;
        
        for(int r=0;r<n;r++){
            for(int c=0;c<m;c++){
                if(vis[r][c]==0 && grid[r][c]=='1'){
                    bfs(r,c,vis,grid);
                    ans++;
                }
            }
        }


class Solution {
    static class Pair {
        int row, col;
        Pair(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }

    public void bfs(int r, int c, char[][] grid) {
        Queue<Pair> queue = new LinkedList<>();
        queue.offer(new Pair(r, c));
        grid[r][c] = '2'; // Mark as visited

        int[] deltaRow = {-1, 0, 1, 0};
        int[] deltaCol = {0, 1, 0, -1};

        while (!queue.isEmpty()) {
            Pair current = queue.poll();

            for (int i = 0; i < 4; i++) {
                int nRow = current.row + deltaRow[i];
                int nCol = current.col + deltaCol[i];

                if (nRow >= 0 && nRow < grid.length && nCol >= 0 && nCol < grid[0].length
                        && grid[nRow][nCol] == '1') {
                    grid[nRow][nCol] = '2'; // Mark as visited
                    queue.offer(new Pair(nRow, nCol));
                }
            }
        }
    }

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;

        int n = grid.length;
        int m = grid[0].length;
        int islandCount = 0;

        for (int r = 0; r < n; r++) {
            for (int c = 0; c < m; c++) {
                if (grid[r][c] == '1') {
                    bfs(r, c, grid);
                    islandCount++;
                }
            }
        }
        return islandCount;
    }
}

DFS 

class Solution {

    public void dfs(int r, int c, char[][] grid) {
        grid[r][c] = '2'; // Mark as visited

        int[] deltaRow = {-1, 0, 1, 0};
        int[] deltaCol = {0, 1, 0, -1};

            for (int i = 0; i < 4; i++) {
                int nRow = r + deltaRow[i];
                int nCol = c + deltaCol[i];

                if (nRow >= 0 && nRow < grid.length && nCol >= 0 && nCol < grid[0].length
                        && grid[nRow][nCol] == '1') {
                    dfs(nRow,nCol,grid);
                }
            }

    }

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;

        int n = grid.length;
        int m = grid[0].length;
        int islandCount = 0;

        for (int r = 0; r < n; r++) {
            for (int c = 0; c < m; c++) {
                if (grid[r][c] == '1') {
                    dfs(r, c, grid);
                    islandCount++;
                }
            }
        }
        return islandCount;
    }
}


        
        return ans;
        
    }
}
