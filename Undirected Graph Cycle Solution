class Solution {
    static class Pair{
        int node,parent;
        Pair(int node, int parent){
            this.node = node;
            this.parent = parent;
        }
    }
    
    public boolean detectCycle(int src, ArrayList<ArrayList<Integer>> adj, int[] vis){
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(src,-1));
        vis[src]=1;
        
        while(!q.isEmpty()){
            int node = q.peek().node;
            int parent = q.peek().parent;
            q.poll();
            
            for(int nbr: adj.get(node)){
                if(vis[nbr]==0){
                    q.offer(new Pair(nbr,node));
                    vis[nbr]=1;
                }else if(parent != nbr){
                    return true;
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int V = adj.size();
        int[] vis = new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                if(detectCycle(i,adj,vis)){
                    return true;
                }
            }
        }
        
        return false;
    }
}
