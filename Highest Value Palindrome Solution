import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'highestValuePalindrome' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER n
     *  3. INTEGER k
     */

    public static String highestValuePalindrome(String s, int n, int k) {
    // Write your code here
    char[] arr = s.toCharArray();
    int changes = 0;
    boolean[] changed = new boolean[n];
    
    int left = 0;
    int right = n-1;
    while(left<right){
        if(arr[left]!=arr[right]){
            arr[left]=arr[right]=(char)Math.max(arr[left],arr[right]);
            changes++;
            changed[left]=changed[right]=true;
        }
        left++;
        right--;
    }
    
    if(changes>k) return "-1";
    
    int rem = k-changes;
    left = 0;
    right = n-1;
    
    while(left<=right){
        if(arr[left]!='9'){
            if(changed[left] && changed[right]){
                if(rem>0){
                    arr[left]=arr[right]='9';
                    rem--;
                }
            }else if(rem>=2){
                    arr[left]=arr[right]='9';
                    rem-=2;
                }
            
        }
        
        if(left==right && rem>0){
            arr[left]='9';
            rem--;
        }
        
        left++;
        right--;
    }
    
    return new String(arr);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int k = Integer.parseInt(firstMultipleInput[1]);

        String s = bufferedReader.readLine();

        String result = Result.highestValuePalindrome(s, n, k);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
