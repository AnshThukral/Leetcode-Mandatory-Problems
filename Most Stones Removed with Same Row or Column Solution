class Solution {
    static class DSU{
        static int[] parent;
        static int[] size;

        DSU(int n){
            parent = new int[n];
            size = new int[n];

            for(int i=0;i<n;i++){
                parent[i]=i;
                size[i]=1;
            }
        }

        static int find(int n){
            if(parent[n]==n) return n;

            return parent[n]=find(parent[n]);
        }

        static void union(int x,int y){
            int rootX = find(x);
            int rootY = find(y);

            if(rootX != rootY){
                if(size[rootX]>size[rootY]){
                    parent[rootY]=rootX;
                    size[rootX]+=size[rootY];
                }else{
                    parent[rootX]=rootY;
                    size[rootY]+=size[rootX];
                }
            }
        }
    }
    public int removeStones(int[][] stones) {
        int n = stones.length;
        int maxRow = 0;
        int maxCol = 0;

        for(int[] stone: stones){
            maxRow=Math.max(stone[0],maxRow);
            maxCol=Math.max(stone[1],maxCol);
        }

        DSU ds = new DSU(maxRow + maxCol + 2);

        HashMap<Integer,Integer> Nodes = new HashMap<>();
        for(int i=0;i<n;i++){
            int nodeRow = stones[i][0];
            int nodeCol = stones[i][1] + maxRow + 1;
            DSU.union(nodeRow,nodeCol);
            Nodes.put(nodeRow,1);
            Nodes.put(nodeCol,1);
        }

        int cnt=0;
        for(Map.Entry<Integer,Integer> it : Nodes.entrySet()){
            if(DSU.find(it.getKey()) == it.getKey()){
                cnt++;
            }
        }

        return n-cnt;
    }
}
