class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        ArrayList<Integer> ans = new ArrayList<>();
        
        if(!isLeaf(node)) ans.add(node.data);
        
        addLeft(node.left,ans);
        addLeaves(node,ans);
        addRight(node.right,ans);
        
        return ans;
    }
    
    public boolean isLeaf(Node node){
        return node!=null && node.left==null && node.right==null;
    }
    
    public void addLeft(Node node,ArrayList<Integer> ans){
        while(node!=null){
            if(!isLeaf(node)) ans.add(node.data);
            if(node.left!=null) node = node.left;
            else node = node.right;
        }
    }
    
    public void addRight(Node node,ArrayList<Integer> ans){
        Stack<Integer> st = new Stack<>();
        while(node!=null){
            if(!isLeaf(node)){
                st.push(node.data);
            }
            if(node.right!=null) node = node.right;
            else node = node.left;
        }
        
        while(!st.isEmpty()){
            ans.add(st.pop());
        }
    }
    
    public void addLeaves(Node node,ArrayList<Integer> ans){
        if(node==null) return;
        if(isLeaf(node)){
            ans.add(node.data);
            return;
        }
        addLeaves(node.left,ans);
        addLeaves(node.right,ans);
    }
}
