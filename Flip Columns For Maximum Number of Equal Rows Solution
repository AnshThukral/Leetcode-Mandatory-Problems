T - O( m2 * n )
S - O(m)

class Solution {
    public int maxEqualRowsAfterFlips(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        
        int maxRows = 0;
        
        for (int[] currRow : matrix) {
            int[] inverted = new int[n];
            
            for (int col = 0; col < n; col++) {
                inverted[col] = currRow[col] == 0 ? 1 : 0;
            }
            
            int count = 0;
            for (int[] row : matrix) {
                boolean isSame = true;
                boolean isInverted = true;

                for (int col = 0; col < n; col++) {
                    if (row[col] != currRow[col]) {
                        isSame = false;
                    }
                    if (row[col] != inverted[col]) {
                        isInverted = false;
                    }
                }

                if (isSame || isInverted) {
                    count++;
                }
            }
            
            maxRows = Math.max(maxRows, count);
        }
        
        return maxRows;
    }
}

More Efficient 
T - O(m*n)
S - O(m*n)
class Solution {
    public int maxEqualRowsAfterFlips(int[][] matrix) {
        int m = matrix.length; //Rows
        int n = matrix[0].length; //Cols
        
        int maxRows = 0;
        
        HashMap<String,Integer> m1 = new HashMap<>();
        
        
        
        for(int[] row: matrix){
            int firstValue = row[0];
            String nature = "";  //Finding nature of row
            
            for(int col=0;col<n;col++){
                nature += ( row[col]==firstValue ) ? "S":"B";
            }
            
            m1.put(nature,m1.getOrDefault(nature,0)+1); 
            
        }
        
        for(String s: m1.keySet()){
            maxRows = Math.max(maxRows, m1.get(s));  //maxRows contains maximum numberof rows which is sum of that same and inverted rows
        }
        
        return maxRows;
    }
}
