there are two persons alex and sam alex wants to deliver message to sam some persons are in bw them calc how many min person they need to pass message. Test case 1 = No of ppl = 5, Relationships = 4, input array = {{1,2},{2,3},{3,4},{4,5}}, alex = 1, sam = 5 ouput is 3. Test case 2 = No of ppl = 7, Relationships = 5, input array = {{1,3},{1,4},{2,5},{2,6},{5,7}}, alex = 3, sam = 7 ouput is -1. i was thinking shortest distance in undirected graph we will calc shortest dis bw alx and sam and will do -1 to calc no of persons return that else -1


import java.util.*;

class Main {
    public static void main(String[] args) {
        int n = 5;
        int rel = 4;
        int[][] input = {{1,2},{2,3},{3,4},{4,5}};
        int alex = 1;
        int sam = 5;
        
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i <= n; i++) adj.add(new ArrayList<>());
        
        for(int[] edge : input) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]); // undirected
        }

        Queue<Pair> queue = new LinkedList<>();
        boolean[] visited = new boolean[n + 1];
        queue.offer(new Pair(alex, 0));
        visited[alex] = true;

        while(!queue.isEmpty()) {
            Pair curr = queue.poll();
            int node = curr.node;
            int dist = curr.dist;

            if(node == sam){
                System.out.println(dist - 1);
                return;
            }
            for(int neighbor : adj.get(node)) {
                if(!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.offer(new Pair(neighbor, dist + 1));
                }
            }
        }

        System.out.println(-1);
    }

    static class Pair {
        int node, dist;
        Pair(int node, int dist) {
            this.node = node;
            this.dist = dist;
        }
    }
}
