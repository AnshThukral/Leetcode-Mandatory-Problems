class Solution {
    public int takeCharacters(String s, int k) {
        int n = s.length();
        int aCount = 0; //delete
        int bCount = 0; //delete
        int cCount = 0; //delete

        for(char c : s.toCharArray()){
            if(c == 'a'){
                aCount++;
            }else if(c == 'b'){
                bCount++;
            }else if(c == 'c'){
                cCount++;
            }
        }
        
        if(aCount < k || bCount < k || cCount < k){
            return -1;
        }
        
        //Sliding Window
        
        int notDeletedWindow = 0;
        
        int i = 0;
        int j = 0;
        
        while(j<n){
            if(s.charAt(j) == 'a'){
                aCount--;
            }else if(s.charAt(j) == 'b'){
                bCount--;
            }else if(s.charAt(j) == 'c'){
                cCount--;
            }
            
            // If deletion of any character becomes less than k, then shrink the window and bring them back
            
            while(i<=j && (aCount < k || bCount < k || cCount < k)){
                //ith pointer move to right
                if(s.charAt(i) == 'a'){
                    aCount++;
                }else if(s.charAt(i) == 'b'){
                    bCount++;
                }else if(s.charAt(i) == 'c'){
                    cCount++;
                }
                i++;
            }
            
            notDeletedWindow = Math.max(notDeletedWindow,j-i+1);
            
            j++;
            
        }
        return n - notDeletedWindow; //minutes
    }
}
