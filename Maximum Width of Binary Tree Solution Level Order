/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static class Pair{
        TreeNode node;
        int idx;
        Pair(TreeNode node,int idx){
            this.node = node;
            this.idx = idx;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        Deque<Pair> q = new ArrayDeque<>();
        q.offerLast(new Pair(root,0));
        int maxi = 0;
        while(!q.isEmpty()){
            int size = q.size();
            int left = q.peekFirst().idx;
            int right = q.peekLast().idx;
            maxi = Math.max(maxi,right-left+1);

            for(int i=0;i<size;i++){
                TreeNode node = q.peekFirst().node;
                int idx = q.peekFirst().idx;
                q.pollFirst();

                if(node.left!=null){
                    q.offerLast(new Pair(node.left,2*idx + 1));
                }
                if(node.right!=null){
                    q.offerLast(new Pair(node.right,2*idx + 2));
                }
            }
        }
        return maxi;
    }
}
