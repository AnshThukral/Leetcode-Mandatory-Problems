class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        List<Integer> ans = new ArrayList<>();

        Arrays.sort(nums);
        int[] dp = new int[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }
        int maxi = 1;
        int last=0;

        int[] hash = new int[n];

        for(int i=0;i<n;i++){
            hash[i]=i;
            for(int prev=0;prev<i;prev++){
                if(nums[i]%nums[prev]==0 && 1+dp[prev]>dp[i]){
                    dp[i]=1+dp[prev];
                    hash[i]=prev;
                }
            }
        }

        for(int i=0;i<n;i++){
            if(maxi<dp[i]){
                maxi=dp[i];
                last=i;
            }
        }

        ans.add(nums[last]);

        while(hash[last] != last){
            last=hash[last];
            ans.add(nums[last]);
        }

        return ans;

    }
}
