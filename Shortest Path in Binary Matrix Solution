class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        
        if(grid[n-1][n-1]==1 || grid[0][0]==1) return -1;

        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0,0,1});
        grid[0][0]=1;

        while(!q.isEmpty()){
            int[] curr = q.poll();
            int r = curr[0];
            int c = curr[1];
            int dis = curr[2];

            if(r==n-1 && c==n-1) return dis;

            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){
                    int nRow = r + i;
                    int nCol = c + j;

                    if(nRow>=0 && nRow<n && nCol>=0 && nCol<n && grid[nRow][nCol]==0){
                        q.offer(new int[]{nRow,nCol,dis+1});
                        grid[nRow][nCol]=1;
                    }
                }
            }
        }

        return -1;
    }
}
