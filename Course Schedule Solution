class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int N = numCourses;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        for(int i=0;i<N;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge: prerequisites){
            int a = edge[0];
            int b = edge[1];
            adj.get(a).add(b);
        }
        
        Queue<Integer> q = new LinkedList<>();
        int[] inDeg = new int[N];
        
        
        for(int i=0;i<N;i++){
            for(int nbr: adj.get(i)){
                inDeg[nbr]++;
            }
        }
        
        for(int i=0;i<N;i++){
            if(inDeg[i]==0){
                q.offer(i);
            }
        }
        
        ArrayList<Integer> topo = new ArrayList<>();
        
        while(!q.isEmpty()){
            int ele = q.poll();
            topo.add(ele);
            
            for(int nbr: adj.get(ele)){
                inDeg[nbr]--;
                if(inDeg[nbr]==0){
                    q.offer(nbr);
                }
            }
        }
        
        if(topo.size()==N) return true;
        
        return false;
    }
}
