class Solution {
    static class Pair{
        int first,second;
        Pair(int first,int second){
            this.first=first;
            this.second=second;
        }
    }
    static class Tuple{
        int first,second,third;
        Tuple(int first,int second,int third){
            this.first=first;
            this.second=second;
            this.third=third;
        }
    }
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        int m = flights.length;

        for(int i=0;i<m;i++){
            adj.get(flights[i][0]).add(new Pair(flights[i][1],flights[i][2]));
        }

        PriorityQueue<Tuple> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.first));
        pq.offer(new Tuple(0,src,0)); //cost node stops

        int[][] dist = new int[n][k+2];
        for(int i=0;i<n;i++){
            for(int j=0;j<k+2;j++){
                dist[i][j]=Integer.MAX_VALUE;
            }
        }
        dist[src][0]=0;

        while(!pq.isEmpty()){
            Tuple curr = pq.poll();
            int cost = curr.first;
            int node = curr.second;
            int stops = curr.third;

            if(node==dst) return cost;

            if(stops<=k){
                for(Pair nbr: adj.get(node)){
                    int next = nbr.first;
                    int price = nbr.second;

                    if(cost + price < dist[next][stops+1]){
                        dist[next][stops+1]=cost + price;
                        pq.offer(new Tuple(cost+price,next,stops+1));
                    }
                }
            }
        }
        return -1;
    }
}
