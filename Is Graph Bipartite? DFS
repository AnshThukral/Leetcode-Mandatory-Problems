class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int m = graph[0].length;

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<n;i++){
            int[] arr = graph[i];
            for(int ele: arr){
                adj.get(i).add(ele);
            }
        }

        int[] color = new int[n];
        Arrays.fill(color,-1);

        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(dfs(i,0,color,adj)==false) return false;
            }
        }

        return true;
    }

    public boolean dfs(int start,int col,int[] color,ArrayList<ArrayList<Integer>> adj){
        color[start]=col;

        for(int nbr: adj.get(start)){
            if(color[nbr]==-1){
                if(dfs(nbr,1-col,color,adj)==false) return false;
            }else if(color[nbr]==col){
                return false;
            }
        }

        return true;
    }
}
