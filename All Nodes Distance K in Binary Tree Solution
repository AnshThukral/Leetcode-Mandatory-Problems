/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void buildParent(TreeNode root,TreeNode par,Map<TreeNode,TreeNode> parent){
        if(root==null) return;
        parent.put(root,par);
        buildParent(root.left,root,parent);
        buildParent(root.right,root,parent);
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode,TreeNode> parent = new HashMap<>();

        buildParent(root,null,parent);

        return solve(target,k,parent); 

    }

    public List<Integer> solve(TreeNode target,int k,Map<TreeNode,TreeNode> parent){
        Queue<TreeNode> q = new LinkedList<>();
        Set<TreeNode> vis = new HashSet<>();
        q.add(target);
        vis.add(target);
        int dist = 0;
        while(!q.isEmpty()){
            int size = q.size();
            if(dist==k) break;
            for(int i=0;i<size;i++){
                TreeNode node = q.poll();
                add(q,vis,node.left);
                add(q,vis,node.right);
                add(q,vis,parent.get(node));
            }
            dist++;
        }

        List<Integer> res = new ArrayList<>();
        while(!q.isEmpty()){
            res.add(q.poll().val);
        }
        return res;
    }

    public void add(Queue<TreeNode> q, Set<TreeNode> vis,TreeNode node){
        if(node !=null && vis.add(node)){
            q.add(node);
        }
    }
}
