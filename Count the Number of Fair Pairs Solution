import java.util.Arrays;

public class Solution {
    public long countFairPairs(int[] nums, int lower, int upper) {
        Arrays.sort(nums);
        int n = nums.length;
        long ans = 0;
        
        for (int i = 0; i < n - 1; i++) {
            int lowIndex = findFirstIndex(nums, i + 1, n - 1, lower - nums[i]);
            int highIndex = findLastIndex(nums, i + 1, n - 1, upper - nums[i] + 1);
            
            if (lowIndex != -1 && highIndex != -1 && lowIndex <= highIndex) {
                ans += (highIndex - lowIndex )* 1;
            }
        }
        
        return ans;
    }
    
    // Finds the first index where nums[index] >= target
    private int findFirstIndex(int[] nums, int left, int right, int target) {
        int result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] >= target) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return result;
    }

    // Finds the last index where nums[index] <= target
    private int findLastIndex(int[] nums, int left, int right, int target) {
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] >= target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
