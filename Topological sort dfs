class Solution {
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        int n = adj.size();
        int[] vis = new int[n];
        Stack<Integer> s = new Stack<>();
        
        for(int i=0;i<n;i++){
            if(vis[i]==0){
                dfs(i,adj,vis,s);
            }
        }
        
        ArrayList<Integer> order=new ArrayList<>();
        int index=0;
        while(!s.isEmpty()){
            order.add(s.pop());
        }
        return order;
    }
    
    static void dfs(int node,ArrayList<ArrayList<Integer>> adj,int[] vis,Stack<Integer> s){
        vis[node]=1;
        
        for(int nbr: adj.get(node)){
            if(vis[nbr]==0){
                dfs(nbr,adj,vis,s);
            }
        }
        s.push(node);
    }
}
