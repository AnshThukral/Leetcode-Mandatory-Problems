BFS

class Solution {
    public static void bfs(int node,ArrayList<ArrayList<Integer>> adj,int[] visited){
        Queue<Integer> q1 = new LinkedList<>();
        
        q1.offer(node);
        visited[node]=1;
        
        while(!q1.isEmpty()){
            int f = q1.poll();
            for(int nbr: adj.get(f)){
                if(visited[nbr]==0){
                    q1.offer(nbr);
                    visited[nbr]=1;
                }
            }
        }
    }
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        // code here
        ArrayList<ArrayList<Integer>> adjLs = new ArrayList<>();
        
        for(int i=0;i<V;i++){
            adjLs.add(new ArrayList<>());
        }
        
        for(int i=0;i<V;i++){
            for(int j=0;j<V;j++){
                if(adj.get(i).get(j)==1 && i!=j){
                    adjLs.get(i).add(j);
                    adjLs.get(j).add(i);
                }
            }
        }
        
        
        int ans = 0;
        int[] visited = new int[V];
        
        for(int i=0;i<V;i++){
            if(visited[i]==0){
                bfs(i,adjLs,visited);
                ans++;
            }
        }
        
        return ans;
    }
};

DFS 

class Solution {
    public static void dfs(int node,ArrayList<ArrayList<Integer>> adj,int[] visited){
        visited[node]=1;
        
        for(int nbr: adj.get(node)){
            if(visited[nbr]==0){
                dfs(nbr,adj,visited);
            }
        }
    }
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        // code here
        ArrayList<ArrayList<Integer>> adjLs = new ArrayList<>();
        
        for(int i=0;i<V;i++){
            adjLs.add(new ArrayList<>());
        }
        
        for(int i=0;i<V;i++){
            for(int j=0;j<V;j++){
                if(adj.get(i).get(j)==1 && i!=j){
                    adjLs.get(i).add(j);
                    adjLs.get(j).add(i);
                }
            }
        }
        
        
        int ans = 0;
        int[] visited = new int[V];
        
        for(int i=0;i<V;i++){
            if(visited[i]==0){
                dfs(i,adjLs,visited);
                ans++;
            }
        }
        
        return ans;
    }
};
