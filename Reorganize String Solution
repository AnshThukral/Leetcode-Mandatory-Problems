class Solution {
    static class Pair{
        int first;
        int second;
        Pair(int first,int second){
            this.first=first;
            this.second=second;
        }
    }
    public String reorganizeString(String s) {
        HashMap<Character,Integer> map = new HashMap<>();

        for(char c : s.toCharArray()){
            int count = map.getOrDefault(c,0)+1;

            if(count > (s.length() + 1)/2) return "";

            map.put(c,count);
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->b.first-a.first);

        for(char c: map.keySet()){
            pq.offer(new Pair(map.get(c),c));
        }

        StringBuilder res = new StringBuilder();

        while(pq.size()>=2){
            Pair fir = pq.poll();
            Pair sec = pq.poll();

            res.append((char)fir.second);
            res.append((char)sec.second);

            fir.first--;
            sec.first--;

            if(fir.first>0){
                pq.offer(new Pair(fir.first,fir.second));
            }
            if(sec.first>0){
                pq.offer(new Pair(sec.first,sec.second));
            }
        }

        if(!pq.isEmpty()){
            Pair fir = pq.poll();
            res.append((char)fir.second);
        }

        return res.toString();
    }
}
