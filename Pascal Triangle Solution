class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();

        // Base case: first row is always [1]
        if (numRows <= 0) return triangle;
        
        triangle.add(new ArrayList<>());
        triangle.get(0).add(1);

        // Generate each row
        for (int row = 1; row < numRows; row++) {
            List<Integer> currentRow = new ArrayList<>();
            List<Integer> prevRow = triangle.get(row - 1);

            // The first element in each row is always 1
            currentRow.add(1);

            // Calculate the middle elements
            for (int col = 1; col < row; col++) {
                currentRow.add(prevRow.get(col - 1) + prevRow.get(col));
            }

            // The last element in each row is always 1
            currentRow.add(1);
            triangle.add(currentRow);
        }
        
        return triangle;
        
    }
}
