class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();

        char[][] arr = new char[n][n];

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                arr[i][j]='.';
            }
        }

        solve(0,ans,arr,n);

        return ans;
    }

    public void solve(int row,List<List<String>> ans,char[][] arr,int n){
        if(row==n){
            List<String> temp = new ArrayList<>();

            for(char[] ele: arr){
                temp.add(new String(ele));
            }
            ans.add(temp);
            return;
        }

        for(int col=0;col<n;col++){
            if(isSafe(row,col,arr)){
                arr[row][col]='Q';
                solve(row+1,ans,arr,n);
                arr[row][col]='.';
            }
        }
    }

    public boolean isSafe(int row,int col,char[][] arr){

        //upper rows
        for(int i=0;i<row;i++){
            if(arr[i][col]=='Q') return false;
        }

        //upper left
        for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
            if(arr[i][j]=='Q') return false;
        }

        //upper right
        for(int i=row-1,j=col+1;i>=0 && j<arr.length;i--,j++){
            if(arr[i][j]=='Q') return false;
        }
        return true;
    }
}
