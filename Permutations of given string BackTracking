class Solution {
    public List<String> find_permutation(String S) {
        // Code here
        List<String> l1 = new ArrayList<>();
        char[] ch=S.toCharArray();
        solve(ch,0,l1);
        Collections.sort(l1);
        return l1;
    }
    
    void solve(char[] s,int start, List<String> l1){
        if(start== s.length-1){
            l1.add(new String (s));
            return;
        }
        
        HashSet<Character> m1= new HashSet<>();
        
        for(int i=start;i<s.length;i++){
            if(!m1.contains(s[i])){
                m1.add(s[i]);
                swap(s,start,i);
                solve(s,start+1,l1);
                swap(s,start,i); //BackTracking
            }
        }
    }
    
    void swap(char[] s,int i,int j){
        char temp=s[i];
        s[i]=s[j];
        s[j]=temp;
    }
}
