import java.util.HashMap;

class Solution {
    public String minWindow(String s, String t) {
        if (s.equals(t)) {
            return s;
        }
        if (t.length() > s.length()) {
            return "";
        }
        
        // Step 1: Build the frequency map for string t
        HashMap<Character, Integer> mp1 = new HashMap<>();
        for (char c : t.toCharArray()) {
            mp1.put(c, mp1.getOrDefault(c, 0) + 1);
        }
        
        int start = 0, end = 0, minLen = Integer.MAX_VALUE, minStart = 0;
        int count = mp1.size();
        
        // Step 2: Start sliding the window
        while (end < s.length()) {
            char c1 = s.charAt(end);
            if (mp1.containsKey(c1)) {
                mp1.put(c1, mp1.get(c1) - 1);
                if (mp1.get(c1) == 0) {
                    count--;
                }
            }
            end++;
            
            // Step 3: When all characters are found, start shrinking the window
            while (count == 0) {
                if (end - start < minLen) {
                    minLen = end - start;
                    minStart = start;
                }
                
                char c2 = s.charAt(start);
                if (mp1.containsKey(c2)) {
                    mp1.put(c2, mp1.get(c2) + 1);
                    if (mp1.get(c2) > 0) {
                        count++;
                    }
                }
                start++;
            }
        }
        
        // Step 4: If no valid window is found, return an empty string
        return minLen == Integer.MAX_VALUE ? "" : s.substring(minStart, minStart + minLen);
    }
}
