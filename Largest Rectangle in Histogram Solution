class Solution {
    static class Pair{
        int val,index;
        Pair(int val, int index){
            this.val=val;
            this.index=index;
        }
    }
    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int[] width = new int[n];
        int[] area=new int[n];
        int[] right=new int[n];
        int[] left=new int[n];
        
        right=Nsr(heights,n);
        left=Nsl(heights,n);
        
        int Max=-1;
        
        for(int i=0;i<n;i++){
            
            width[i]=right[i]-left[i]-1;
            
            area[i]=width[i] * heights[i];
            
            Max=Math.max(area[i],Max);
        }
        
        return Max;
        
        
    }
    
    public int[] Nsr(int[] heights, int n){
        int pseudoIndex1=n;
        int[] r1=new int[n];
        Stack<Pair> st1= new Stack<>();
        for(int i=n-1;i>=0;i--){            
            if(st1.isEmpty()){
                r1[i]=pseudoIndex1;
            }
            
            else if(!st1.isEmpty() && st1.peek().val<heights[i]){
                r1[i]=st1.peek().index;
            }
            
            else{
                while(!st1.isEmpty() && st1.peek().val>=heights[i]){
                    st1.pop();
                }
                if(st1.isEmpty()){
                    r1[i]=pseudoIndex1;
                }else{
                    r1[i]=st1.peek().index;
                }
            }
            st1.push(new Pair(heights[i],i));
                
        }
        return r1;
        
    }
    public int[] Nsl(int[] heights, int n){
        int pseudoIndex2=-1;
        int[] l1=new int[n];
        Stack<Pair> st2= new Stack<>();
        for(int i=0;i<n;i++){            
            if(st2.isEmpty()){
                l1[i]=pseudoIndex2;
            }
            
            else if(!st2.isEmpty() && st2.peek().val<heights[i]){
                l1[i]=st2.peek().index;
            }
            
            else{
                while(!st2.isEmpty() && st2.peek().val>=heights[i]){
                    st2.pop();
                }
                if(st2.isEmpty()){
                    l1[i]=pseudoIndex2;
                }else{
                    l1[i]=st2.peek().index;
                }
            }
            
            st2.push(new Pair(heights[i],i));

                
        }
        return l1;
    }
}
