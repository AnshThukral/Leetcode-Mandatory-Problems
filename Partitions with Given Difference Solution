class Solution {
    int countPartitions(int[] arr, int d) {
        int n = arr.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }

        // Base checks
        if (sum < d || (d + sum) % 2 != 0) {
            return 0;
        }

        int s1 = (d + sum) / 2;

        return countOfSubsetSum(arr, s1);
    }

    public int countOfSubsetSum(int[] arr, int target) {
        int n = arr.length;
        int[][] t = new int[n + 1][target + 1];

        // Initialization
        t[0][0] = 1;
        // DP logic
        for (int i = 1; i < n + 1; i++) {
            for (int j = 0; j < target + 1; j++) {
                if (arr[i - 1] <= j) {
                    t[i][j] = t[i - 1][j - arr[i - 1]] + t[i - 1][j];
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }

        return t[n][target];
    }
}
