/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static class Pair{
        int depth;
        TreeNode root;
        Pair(int depth,TreeNode root){
            this.depth=depth;
            this.root=root;
        }
    }
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        return dfs(root).root;
    }

    public Pair dfs(TreeNode root){
        if(root==null){
            return new Pair(0,null);
        }

        Pair left = dfs(root.left);
        Pair right = dfs(root.right);

        if(left.depth==right.depth){
            return new Pair(left.depth+1,root);
        }else if(left.depth>right.depth){
            return new Pair(left.depth+1,left.root);
        }else{
            return new Pair(right.depth+1,right.root);
        }
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = 0;
    HashMap<Integer, Integer> map = new HashMap<>();

    public TreeNode lcaDeepestLeaves(TreeNode root) {
        depth(root, 0);
        return LCA(root);
    }

    public void depth(TreeNode root, int d) {
        if (root == null) return;

        max = Math.max(max, d);
        map.put(root.val, d);
        depth(root.left, d + 1);
        depth(root.right, d + 1);
    }

    public TreeNode LCA(TreeNode root) {
        if (root == null || map.get(root.val) == max) {
            return root;
        }

        TreeNode left = LCA(root.left);
        TreeNode right = LCA(root.right);

        if (left != null && right != null) {
            return root;
        }

        return (left != null) ? left : right;
    }
}
