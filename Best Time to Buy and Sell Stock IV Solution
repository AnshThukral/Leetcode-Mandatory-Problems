class Solution {
    static int[][][] t;
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        t = new int[n][2][k+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                for(int s=0;s<k+1;s++){
                    t[i][j][s]=-1;
                }
            }
        }
        return solve(0,1,k,n,prices);
    }

    public int solve(int ind,int buy,int k,int n,int[] prices){
        if(ind==n) return 0;
        if(k==0) return 0;

        if(t[ind][buy][k]!=-1) return t[ind][buy][k];

        if(buy==1){
            return t[ind][buy][k] = Math.max(
                (-prices[ind] + solve(ind+1,0,k,n,prices)),
                (0 + solve(ind+1,1,k,n,prices))
            );
        }else{
            return t[ind][buy][k] =  Math.max(
                (prices[ind] + solve(ind+1,1,k-1,n,prices)),
                (0 + solve(ind+1,0,k,n,prices))
            );
        }
    }
}
