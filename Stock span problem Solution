class Solution {
    // Function to calculate the span of stock's price for all n days.
    static class Pair{
        int price,index;
        Pair(int price,int index){
            this.price=price;
            this.index=index;
        }
    }
    
    public ArrayList<Integer> calculateSpan(int[] arr) {
        // write code here
        int n = arr.length;
        int[] ans = new int[n];
        
        ArrayList<Integer> li = new ArrayList<>();
        
        Stack<Pair> s = new Stack<>();
        
        for(int i=0;i<n;i++){
            if(s.size()==0){
                ans[i]=-1;
            }
            else if(s.size()>0 && s.peek().price>arr[i]){
                ans[i]=s.peek().index;
            }else if(s.size()>0 && s.peek().price<=arr[i]){
                while(s.size()>0 && s.peek().price<=arr[i]){
                    s.pop();
                }
                if(s.size()==0){
                    ans[i]=-1;
                }
                else{
                    ans[i]=s.peek().index;
                }
            }
            s.push(new Pair(arr[i],i));
        }
        
        for(int i=0;i<n;i++){
            int temp = i-ans[i];
            li.add(temp);
        }
        
        return li;
        
    }
}

class Solution {
    
    static class Pair{
        int price, index;
        Pair(int price,int index){
            this.price=price;
            this.index=index;
        }
    }
    // Function to calculate the span of stockâ€™s price for all n days.
    public static int[] calculateSpan(int price[], int n) {
        // Your code here
        int[] ans=new int[n];
        Stack<Pair> st=new Stack<>();
        
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && st.peek().price<=price[i]){
                st.pop();
            }
            if(st.isEmpty()){
                ans[i]=i+1;
            }
            else{
                ans[i]=i-st.peek().index;
            }
            st.push(new Pair(price[i],i));
        }
        return ans;
    }
}
