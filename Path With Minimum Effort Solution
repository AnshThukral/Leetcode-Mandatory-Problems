class Solution {
    static class Tuple{
        int dis;
        int row;
        int col;
        Tuple(int dis,int row,int col){
            this.dis=dis;
            this.row=row;
            this.col=col;
        }
    }
    public int minimumEffortPath(int[][] heights) {
        PriorityQueue<Tuple> pq = new PriorityQueue<>((x,y) -> x.dis-y.dis);

        int n = heights.length;
        int m = heights[0].length;

        int[][] dist = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dist[i][j]=Integer.MAX_VALUE;
            }
        }
        dist[0][0]=0;
        pq.offer(new Tuple(0,0,0)); // diff, row, col

        int[] delRow = {-1,0,1,0};
        int[] delCol = {0,1,0,-1};

        while(!pq.isEmpty()){
            Tuple node = pq.poll();
            int diff = node.dis;
            int row = node.row;
            int col = node.col;

            if(row==n-1 && col==m-1) return diff;

            for(int i=0;i<4;i++){
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];

                if(nRow>=0 && nRow<n && nCol>=0 && nCol<m){
                    int newEffort = Math.max(Math.abs(heights[nRow][nCol] - heights[row][col]),diff);

                    if(newEffort< dist[nRow][nCol]){
                        dist[nRow][nCol] = newEffort;
                        pq.offer(new Tuple(newEffort,nRow,nCol));
                    } 
                }
            }
        }
        return 0;
    }
}
